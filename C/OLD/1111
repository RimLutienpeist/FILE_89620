#include <stdio.h>

int partition( int a[], int left, int right );

void sort ( int a[], int left, int right )
{
    if ( left < right ) {
        int p = partition(a, left, right);
        sort(a, left, p);
        sort(a, p+1, right);
    }
}

int main(void)
{
    int n;
    scanf("%d", &n);
    int a[n];
    for ( int i=0; i<n; i++ ) {
        scanf("%d", &a[i]);
    }

    sort(a, 0, n-1);

    for ( int i=0; i<n; i++ ) {
        printf("%d\n", a[i]);
    }
}

/* 请在这里填写答案 */


void swap(int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

int median_of_three(int a[], int left, int right)
{
    int mid = left + (right - left) / 2;
    if (a[left] > a[mid])
    {
        swap(&a[left], &a[mid]);
    }
    if (a[left] > a[right])
    {
        swap(&a[left], &a[right]);
    }
    if (a[mid] > a[right])
    {
        swap(&a[mid], &a[right]);
    }
    return mid;
}

void insertion_sort(int a[], int left, int right)
{
    for (int i = left + 1; i <= right; i++)
    {
        int key = a[i];
        int j = i - 1;
        while (j >= left && a[j] > key)
        {
            a[j + 1] = a[j];
            j--;
        }
        a[j + 1] = key;
    }
}

int partition(int a[], int left, int right)
{
    if (right - left + 1 <= 5)
    {
        insertion_sort(a, left, right);
        return left + (right - left) / 2;
    }

    int mid = median_of_three(a, left, right);
    int pivot = a[mid];
    swap(&a[mid], &a[left]);

    int i = left, j = right;
    while (i < j)
    {
        while (i < j && a[j] >= pivot)
        {
            j--;
        }
        if (i < j)
        {
            a[i++] = a[j];
        }
        while (i < j && a[i] < pivot)
        {
            i++;
        }
        if (i < j)
        {
            a[j--] = a[i];
        }
    }
    a[i] = pivot;
    return i;
}
